temp = temp[-1,]
res = rbind(res, temp)
}
rownames(res) = rep(colnames(data_table)[1], quartercount)
return (res)
}
temp = getPeriodHistoryPrice("2015-10-01","2015-12-21","000001",getRestorationofRightPrice)
temp
prestore_index_category = function(url, filename){
#获取数据的json主体
temp = fromJSON(str_extract_all(read_html(url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
colnames(temp$items) = temp$fields
#只存前4列的值, 每次写入都是覆写
write.table(temp$items[,1:4],filename, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = FALSE)
}
temp = fromJSON(str_extract_all(read_html(Index_url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
library(stringr)
temp = fromJSON(str_extract_all(read_html(Index_url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
temp
Index_url = "http://money.finance.sina.com.cn/d/api/openapi_proxy.php/?__s=[[%22hq%22,%22dpzs%22,%22%22,0,1,40]]&callback=FDC_DC.theTableData"
#新浪指数种类文件
IndexCategory_file = "index_category"
prestore_index_category(Index_url, IndexCategory_file)
prestore_index_category = function(url, filename){
#获取数据的json主体
temp = fromJSON(str_extract_all(read_html(url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
colnames(temp$items) = temp$fields
#只存前4列的值, 每次写入都是覆写
write.table(temp$items[,1:3],filename, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = FALSE)
}
prestore_industral_category = function(url, filename){
#获取数据的json主体
temp = fromJSON(str_extract_all(read_html(url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
colnames(temp$items) = temp$fields
#只存前4列的值, 每次写入都是覆写
write.table(temp$items[,1:4],filename, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = FALSE)
}
IndustryCategory_file = "industry_category"
#新浪指
prestore_index_category(Index_url, IndexCategory_file)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help("tabPanel")
t(read.table("index_category"))
t(read.table("index_category", header = TRUE, row.names = 1))
t(read.table("industry_category", header = TRUE, row.names = 1))
as.list(t(read.table("industry_category", header = TRUE, row.names = 1))[1,])
read.table(IndexCategory_file, header = TRUE, sep = "\t", row.names = 1)
shiny::runApp()
shiny::runApp()
help("selectInput")
shiny::runApp()
shiny::runApp()
temp = t(read.table(IndustryCategory_file, header = TRUE,row.names = 1, sep = "\t"))
temp[,1:2]
temp = t(read.table(IndexCategory_file, header = TRUE,row.names = 1, sep = "\t"))
temp[,1:2]
read.table(IndexCategory_file, header = TRUE,row.names = 1, sep = "\t")
help("write.table")
prestore_index_category = function(url, filename){
#获取数据的json主体
temp = fromJSON(str_extract_all(read_html(url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
colnames(temp$items) = temp$fields
#只存前3列的值, 每次写入都是覆写
write.table(temp$items[,2:3],filename, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = TRUE)
}
prestore_index_category(Index_url, IndexCategory_file)
temp = read.table(IndexCategory_file, header = TRUE,row.names = 1, sep = "\t")
temp
temp = fromJSON(str_extract_all(read_html(IndexCategory_file), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
temp = fromJSON(str_extract_all(read_html(Index_url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
temp
colnames(temp$items) = temp$fields
temp
temp$items[,1:3]
write.table(temp$items[,1:3],IndexCategory_file, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = TRUE)
}
write.table(temp$items[,1:3],IndexCategory_file, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = TRUE)
write.table(temp$items[,1:3],IndexCategory_file, sep = "\t",
append = FALSE, row.names = FALSE, col.names = TRUE, quote = FALSE)
help("read.table")
temp = read.table(IndexCategory_file, header = TRUE,row.names = 1,
colClasses = "character",sep = "\t")
temp
t(temp)
shiny::runApp()
shiny::runApp()
temp
t(temp)[2,]
shiny::runApp()
help("chartSeries")
temp
help("reactive")
shiny::runApp()
TRUE | FALSE
TRUE & FALSE
help("selectInput")
shiny::runApp()
shiny::runApp()
temp = t(read.table(IndexCategory_file, header = TRUE,row.names = 3,
colClasses = "character",sep = "\t"))
#隐式返回要求的list数据
as.list(temp[2,])
temp
base_index = c("000001","000003")
new_base_index = c("000002","000003")
base_index %in% new_base_index
new_base_index(new_base_index %in% base_index)
new_base_index[new_base_index %in% base_index]
new_base_index[!new_base_index %in% base_index]
new_base_index[!(new_base_index %in% base_index)]
shiny::runApp()
temp
temp = getPeriodHistoryPrice("2015-10-1","2015-12-01","000001",getRestorationofRightPrice)
temp
temp[,c(1,3)]
library(lattice)
help("xyplot")
help("xyplot.ts")
xyplot(temp[,2] ~ rownames(temp))
xyplot(as.numeric(temp[,2]) ~ rownames(temp))
xyplot(as.numeric(temp[,2]) ~ as.character(rownames(temp)))
as.data.frame(temp)
temp = as.data.frame(temp)
temp$date = rownames(temp)
xyplot(`收盘价` ~ date, data = temp)
xyplot(`收盘价` ~ as.character(date), data = temp)
xyplot(`收盘价` ~ as.factor(date), data = temp)
xyplot(`收盘价` ~ as.factor(date), data = temp, type = "o")
shiny::runApp()
library(dygraphs)
nhtemp
is(nhtemp)
help(ts)
temp
ts(temp, start = rownames(temp)[1], end = rownames(temp)[nrow(temp)], names = rownames(temp))
ts(temp[,3], start = rownames(temp)[1], end = rownames(temp)[nrow(temp)], names = rownames(temp))
ts(temp[,3],  names = rownames(temp))
dygraph(ts(temp[,3],  names = rownames(temp)), main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("2015-10-08", "2015-12-01"))
help("dygraph")
temp
install.packages(ploty)
install.packages(plotly)
install.packages("plotly")
getPeriodHistoryPrice = function(startDate, endDate, stockid, parseFun){
startDate = as.Date(startDate)
endDate = as.Date(endDate)
#判断startDate和endDate， 大小关系，是否在不同的季度
if(startDate >= endDate)
return ("开始时间必须小于结束时间")
yq1 = format(as.yearqtr(startDate), format = "year=%Y&jidu=%q")
yq2 = format(as.yearqtr(endDate), format = "year=%Y&jidu=%q")
if(yq1!=yq2){
data = parseFun(yq1, stockid)
data = rbind(data,parseFun(yq2, stockid))
}else
data = parseFun(yq1, stockid)
#截取大于范围内的
index = rownames(data)
data = data[startDate <= index  & endDate >= index,]
return (data)#(xts(data, order.by = as.Date(rownames(data))))
}
mdeaths
fdeaths
is(fdeaths)
help(ts)
temp
ts(temp)
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
print( ts(1:10, frequency = 7, start = c(12, 2), names(1:10)), calendar = TRUE)
print( ts(1:10, frequency = 7, start = c(12, 2), names = c(1:10)), calendar = TRUE)
nhtemp
names(nhtemp)
ts(temp[,3], frequency = 1, names = nrow(temp))
dygraph(ts(temp[,3], frequency = 1, names = nrow(temp)))
t(temp[,3])
temp[,3]
temp
is(temp)
temp[,3]
temp[,1=2:3]
temp[,2:3]
t(temp)
t(temp)[3,]
dygraph(ts(t(temp)[3,], frequency = 1, names = nrow(temp)))
dygraph(ts(temp[,3], frequency = 1, names = rownames(temp)))
dygraph(ts(t(temp)[3,], frequency = 1))
temp
dygraph(ts(temp[,c(3,10)], frequency = 1, names = rownames(temp)))
dygraph(ts(temp[,c(3,9)], frequency = 1, names = rownames(temp)))
temp[,10]
temp[,9]
temp[,8]
dygraph(ts(temp[,c(3,8)], frequency = 1, names = rownames(temp)))
dygraph(ts(temp[,c(8,3)], frequency = 1, names = rownames(temp)))
help("zoom")
help("zoo")
as.ts(xts(data, order.by = as.Date(rownames(data))))
as.ts(xts(temp, order.by = as.Date(rownames(temp))))
dygraph(as.ts(xts(temp, order.by = as.Date(rownames(temp)))))
as.ts(xts(temp, order.by = as.Date(rownames(temp))))
data = as.ts(xts(temp, order.by = as.Date(rownames(temp))))
dygraph(data)
data = xts(temp, order.by = as.Date(rownames(temp)))
dygraph(data)
temp
temp = temp[,-8]
data = xts(temp, order.by = as.Date(rownames(temp)))
dygraph(data)
dygraph(data[,3])
getPeriodHistoryPrice = function(startDate, endDate, stockid, parseFun){
startDate = as.Date(startDate)
endDate = as.Date(endDate)
#判断startDate和endDate， 大小关系，是否在不同的季度
if(startDate >= endDate)
return ("开始时间必须小于结束时间")
yq1 = format(as.yearqtr(startDate), format = "year=%Y&jidu=%q")
yq2 = format(as.yearqtr(endDate), format = "year=%Y&jidu=%q")
if(yq1!=yq2){
data = parseFun(yq1, stockid)
data = rbind(data,parseFun(yq2, stockid))
}else
data = parseFun(yq1, stockid)
#截取大于范围内的
index = rownames(data)
data = data[startDate <= index  & endDate >= index,]
return (xts(data, order.by = as.Date(rownames(data))))
}
temp
(temp$收盘价 - temp$开盘价)
(temp$收盘价 - temp$开盘价) / temp$开盘价
(temp$收盘价 - temp$开盘价) / temp$开盘价 * 100
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help("dygraph-shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.yearqtr(Sys.Date())
as.yearqtr(Sys.Date()) - as.yearqtr("2014-01-01")
as.yearqtr("2014-01-01")
as.yearqtr("2014-12-01")
as.yearqtr("2014-11-01")
as.yearqtr("2014-01-01")
as.yearqtr("2014-11-01")
as.yearqtr("2014-10-01")
as.yearqtr("2015-12-01")
as.yearqtr(as.Date("2015-12-01"))
as.yearqtr(as.Date("2014-12-01"))
as.yearqtr(Sys.Date()) - as.yearqtr(as.Date("2014-12-01"))
as.yearqtr(Sys.Date()) - 1
as.yearqtr(Sys.Date()) + 0.25
as.yearqtr(Sys.Date()) + 0.5
as.yearqtr(as.Date("2014-12-01")) : as.yearqtr(Sys.Date())
as.yearqtr(Sys.Date()) - as.yearqtr(as.Date("2014-12-01"))
(as.yearqtr(Sys.Date()) - as.yearqtr(as.Date("2014-12-01")) ) / 0.25
as.yearqtr(Sys.Date()) + 0.25
(as.yearqtr(Sys.Date()) - as.yearqtr(as.Date("2015-12-01")) )
(as.yearqtr(Sys.Date()) == as.yearqtr(as.Date("2015-12-01")) )
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help("selectInput")
temp
is(temp)
xts(temp, as.Date(rownames(temp)))
temp = xts(temp, as.Date(rownames(temp)))
temp[["x"]] = 1
temp
str_extract("dsafsfs000001sdf","\\d{6}")
str_extract("dsafsfs0000011sdf","\\d{6}")
setwd("~/Documents/R_workspace/stock_web")
temp = getPeriodHistoryPrice("2015-10-01",Sys.Date(), "000001",getRestorationofRightPrice)
library(quantmod)
temp = getPeriodHistoryPrice("2015-10-01",Sys.Date(), "000001",getRestorationofRightPrice)
library(rvest)
temp = getPeriodHistoryPrice("2015-10-01",Sys.Date(), "000001",getRestorationofRightPrice)
temp
help(reactive)
library(shiny)
help(reactive)
temp[,8] = (temp[,3] - temp[,1]) / temp[,1] * 100
temp[,7] = (temp[,3] - temp[,1]) / temp[,1] * 100
temp
temp = temp[,7]
temp
temp = getPeriodHistoryPrice("2015-10-01",Sys.Date(), "000001",getRestorationofRightPrice)
(temp[,3] - temp[,1]) / temp[,1] * 100
temp = getPeriodHistoryPrice("2015-10-01",Sys.Date(), "000001",getIndexHistory)
temp
read.table(IndustryCategory_file, header = TRUE,row.names = 1, sep = "\t")
read.table(IndexCategory_file, header = TRUE,row.names = 3,
colClasses = "character",sep = "\t")
temp = read.table(IndexCategory_file, header = TRUE,row.names = 3,
colClasses = "character",sep = "\t")
rownames(temp$code == "000001")
rownames(temp[,code == "000001"])
rownames(temp[,"code" == "000001"])
rownames(temp[,temp$code == "000001"])
temp[,temp$code == "000001"]
temp[1,]
temp[temp$code=="000001",]
rownames(temp[temp$code == "000001",])
rownames(temp[code == "000001",])
rownames(temp["code" == "000001",])
IndexCategory = read.table(IndexCategory_file, header = TRUE,row.names = 3,
colClasses = "character",sep = "\t")
getYeildRateData = function(data, colname){
temp = (data[,3] - data[,1]) / data[,1] * 100
colnames(temp) = colname
return(temp)
}
shiny::runApp()
shiny::runApp()
str_extract(c("sfasd1423","123456sdfs"))
str_extract(c("sfasd1423","123456sdfs"), "\\d{6}")
shiny::runApp()
input$base_index = c("000001","000009")
base_index = c("000001","000009")
base_index %in% str_extract(c("dsaf","上证指数.000001"),"\\d{6}")
base_index[!(base_index %in% str_extract(c("dsaf","上证指数.000001"),"\\d{6}"))]
shiny::runApp()
base_index = c("000001","000008")
base_index[!(base_index %in% str_extract(c("个股","上证指数.000001"),"\\d{6}"))]
shiny::runApp()
shiny::runApp()
shiny::runApp()
1 != 2 | 2==2
1 != 2 | 2==3 | 2==2
1 != 2 | 2==3 | 2==4
1 != 2 | 2==3 | 2==4
2==3 | 2==4
1 == 2 | 2==3 | 2==4
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help("selectInput")
shiny::runApp()
shiny::runApp()
help("dygraph")
shiny::runApp()
help("sidebarPanel")
shiny::runApp()
shiny::runApp()
help("mainPanel")
shiny::runApp()
shiny::runApp()
shiny::runApp()
help("row")
help("column")
shiny::runApp()
shiny::runApp()
help("textInput")
shiny::runApp()
temp = getIndustralCategoryStocks(IC_Stocks_url("new_blhy"))
library(jsonlite)
temp = getIndustralCategoryStocks(IC_Stocks_url("new_blhy"))
temp = fromJSON(str_extract_all(read_html(IC_Stocks_url("new_blhy")), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
temp
getIndustralCategoryStocks = function(url){
#获取数据的json主体
temp = fromJSON(str_extract_all(read_html(url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
colnames(temp$items) = temp$fields[1:ncol(temp$items)]
return (temp)
}
shiny::runApp()
temp = getIndustralCategoryStocks(IC_Stocks_url("new_blhy"))
temp
temp$items[,1:3]
t(temp[,1:3])
t(temp$items[,1:3])
as.data.frame(temp$items,row.names = temp$items[,1])
as.data.frame(temp$items,row.names = temp$items[,2])
as.data.frame(temp$items,row.names = temp$items[,3])
t(as.data.frame(temp$items,row.names = temp$items[,3])[,1:3])
getIndustralCategoryStocks = function(url){
#获取数据的json主体
temp = fromJSON(str_extract_all(read_html(url), "\\[.+\\]")[[1]][2],
simplifyDataFrame = data.frame)[[1]]
colnames(temp$items) = temp$fields[1:ncol(temp$items)]
return (t(as.data.frame(temp$items,row.names = temp$items[,3])[,1:3]))
}
t(as.data.frame(temp$items,row.names = temp$items[,3])[,1:3])
shiny::runApp()
temp = getFinanceSummary(FinanceSummary_url("000001"))
temp
is(temp)
xts(temp, order.by = temp[,1])
xts(temp, order.by = as.Date(temp[,1]))
getFinanceSummary = function(url){
webpage = read_html(url)#请求网页
#解析网页中的季度财务摘要数据, 一次一个网页中会记录 4个季度数据
data_table = (webpage %>% html_node("table#FundHoldSharesTable") %>% html_table(fill = TRUE))
data_table = data_table[,1:2]#只取有效数据
#每个季度的财务指标行数 : 12行有效数据, 1行空数据
quartercount  = 4
rowcount = 13
# i = 1
res = data_table[1:rowcount, ]
#将单个季度财务概要转换成单条记录
res = t(res[1:rowcount-1,1:2])
#将列名变换可识别明
colnames(res) = res[1,]
res = res[-1,]#删除第一行
for( i in 2:quartercount){
rowindex = rowcount * i
temp = data_table[rowindex-rowcount+1:rowindex, ]
temp = t(temp[1:rowcount-1,1:2])
colnames(temp) = temp[1,]
temp = temp[-1,]
res = rbind(res, temp)
}
#rownames(res) = rep(colnames(data_table)[1], quartercount)
#转成 xts 对象, 并去掉时间数据列
res = xts(res, order.by = as.Date(res[,1]))[,-1]
return (res)
}
temp = getFinanceSummary(FinanceSummary_url("000001"))
temp
is(temp)
shiny::runApp()
shiny::runApp()
temp = getFinanceSummary(FinanceSummary_url("000001"))[,2]
temp
shiny::runApp()
temp
as.numeric(temp)
shiny::runApp()
getFinanceSummary = function(url){
webpage = read_html(url)#请求网页
#解析网页中的季度财务摘要数据, 一次一个网页中会记录 4个季度数据
data_table = (webpage %>% html_node("table#FundHoldSharesTable") %>% html_table(fill = TRUE))
data_table = data_table[,1:2]#只取有效数据
#每个季度的财务指标行数 : 12行有效数据, 1行空数据
quartercount  = 4
rowcount = 13
# i = 1
res = data_table[1:rowcount, ]
#将单个季度财务概要转换成单条记录
res = t(res[1:rowcount-1,1:2])
#将列名变换可识别明
colnames(res) = res[1,]
res = res[-1,]#删除第一行
for( i in 2:quartercount){
rowindex = rowcount * i
temp = data_table[rowindex-rowcount+1:rowindex, ]
temp = t(temp[1:rowcount-1,1:2])
colnames(temp) = temp[1,]
temp = temp[-1,]
res = rbind(res, temp)
}
#rownames(res) = rep(colnames(data_table)[1], quartercount)
#转成 xts 对象, 并去掉时间数据列
res = xts(res, order.by = as.Date(res[,1]))[,-1]
return (res)
}
temp = getFinanceSummary(FinanceSummary_url("000001"))
temp
getFSYieldData = function(data, col,colnames){
temp = data[,col]#取每股收益
colnames(temp) = colnames
return(temp)
}
shiny::runApp()
temp
str_extract("14324.234", "\\d+[.]\\d+")
str_extract(c("14324.234", "341234元"), "\\d+[.]\\d+")
str_extract(c("14324.234", "341234元"), "\\d+[.]－\\d+")
str_extract(c("14324.234", "341234元"), "\\d+[.]-\\d+")
str_extract(c("14324.234", "341234元"), "\\d+[.]{0,}\\d+")
str_extract(c("14324.234", "341234元"), "\\d+[.]*\\d+")
str_extract(c("14324.234", "341234元","元的9090.12"), "\\d+.\\d+")
str_extract(c("14324.234", "341234元","元的9090.12"), "\\d+[.]\\d+")
shiny::runApp()
shiny::runApp()
help("mainPanel")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
